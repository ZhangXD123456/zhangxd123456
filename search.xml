<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2025/02/107.html"/>
      <url>/2025/02/107.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_38377803/article/details/107640639">python使用pymysql连接mysql并进行数据库交互详细教程（附带详细案例及解析）</a></p><h2 id="1-基本连接方法"><a href="#1-基本连接方法" class="headerlink" title="1 基本连接方法"></a>1 基本连接方法</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment" spellcheck="true"># 建立数据库连接，可传参数（详见1.2）</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"123456"</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">"Test"</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8mb4'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用 cursor() 方法创建一个游标对象 cursor，可传参数，表示返回到python的结果用什么方式存储（详见2.2）</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用List作为参数进行查询，塞入参数</span>params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Jack Ma'</span><span class="token punctuation">,</span> <span class="token string">'123123'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使用 execute()  方法执行 SQL 查询，会返回受影响的行数（详见3 - 4）</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from TEST_TABLE where USER_NAME = %s and USER_PASSWORD = %s"</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取结果（详见5）</span>results <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ID: %s, USER_NAME:%s, USER_PASSWORD:%s"</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="2-jupyter提示no-moudle-named-pymysql"><a href="#2-jupyter提示no-moudle-named-pymysql" class="headerlink" title="2 jupyter提示no moudle named pymysql"></a>2 jupyter提示no moudle named pymysql</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/02/104.html"/>
      <url>/2025/02/104.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-MySQL数据安装配置"><a href="#1-MySQL数据安装配置" class="headerlink" title="1 MySQL数据安装配置"></a>1 MySQL数据安装配置</h2><p>MySQL数据库root密码admin123</p><pre><code>PK：主键   NN：不能为空   UQ：值唯一  AI:自动增长 B：binary 二进制数据  UN：unsigned 无符号ZF：zero fill 补0  </code></pre><h3 id="1-1-express中使用MySQL数据库"><a href="#1-1-express中使用MySQL数据库" class="headerlink" title="1.1 express中使用MySQL数据库"></a>1.1 express中使用MySQL数据库</h3><ul><li><h3 id="安装mysql模块"><a href="#安装mysql模块" class="headerlink" title="安装mysql模块"></a>安装mysql模块</h3><pre><code> npm i mysql</code></pre></li></ul><h3 id="1-2-配置mysql"><a href="#1-2-配置mysql" class="headerlink" title="1.2 配置mysql"></a>1.2 配置mysql</h3><p>mysql.creatpool()方法连接数据库</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//建立数据库连接，应用级数据库连接用户不应该用root用户，账号密码注意不能明传</span><span class="token keyword">const</span> db <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">creatpool</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>host<span class="token punctuation">:</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//数据库的ip</span>user<span class="token punctuation">:</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//账号</span>password<span class="token punctuation">:</span><span class="token string">'admin123'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//密码</span>database<span class="token punctuation">:</span><span class="token string">'my_web_db'</span><span class="token comment" spellcheck="true">//指定要操作的数据库</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//测试数据库连接模块</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT 1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> results<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="1-3-mysql操作数据库的方法"><a href="#1-3-mysql操作数据库的方法" class="headerlink" title="1.3 mysql操作数据库的方法"></a>1.3 mysql操作数据库的方法</h3><p>使用db.query()方法查询数据</p><pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT username FROM user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> results<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>插入数据的方法</p><ul><li>可以使用’?’进行占位</li><li>可以使用’SET ?’</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 使用？进行占位</span><span class="token keyword">const</span> user <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">:</span><span class="token string">'zz'</span><span class="token punctuation">,</span>password<span class="token punctuation">:</span><span class="token string">'aa'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> sqlstr <span class="token operator">=</span> <span class="token string">'INSERT INTO users (username,password) VALUES (?,?)'</span><span class="token comment" spellcheck="true">//用[user.username,user.password]代替(?,?)中的？</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span><span class="token punctuation">[</span>user<span class="token punctuation">.</span>username<span class="token punctuation">,</span>user<span class="token punctuation">.</span>password<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> results<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'插入数据成功'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//SET ? 插入方法</span><span class="token keyword">const</span> user <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">:</span><span class="token string">'zz'</span><span class="token punctuation">,</span>password<span class="token punctuation">:</span><span class="token string">'aa'</span><span class="token punctuation">,</span>authority<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> sqlstr2<span class="token operator">=</span><span class="token string">'INSERT INTO user SET ?'</span><span class="token comment" spellcheck="true">//用[user.username,user.password]代替(?,?)中的？</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlstr<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> results<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'插入数据成功'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="1-4-返回值的处理"><a href="#1-4-返回值的处理" class="headerlink" title="1.4 返回值的处理"></a>1.4 返回值的处理</h3><p>mysql的返回值’resules‘结果是 ’[RowDataPacket { password: ‘123’ }]‘，需要通过JSON.parse(JSON.stringify(results))变成”[{ password: ‘123’ }]”形式，然后通过数组的使用方法查找结果。例如JSON.parse(JSON.stringify(results))[0].password</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/02/106.html"/>
      <url>/2025/02/106.html</url>
      
        <content type="html"><![CDATA[<p>可选的 <code>options</code> 对象可以具有以下属性：</p><table><thead><tr><th>属性</th><th>描述</th><th>类型</th><th>缺省值</th></tr></thead><tbody><tr><td><code>dotfiles</code></td><td>是否对外输出文件名以点（.）开头的文件。有效值包括“allow”、“deny”和“ignore”</td><td>字符串</td><td>“ignore”</td></tr><tr><td><code>etag</code></td><td>启用或禁用 etag 生成</td><td>布尔</td><td><code>true</code></td></tr><tr><td><code>extensions</code></td><td>用于设置后备文件扩展名。</td><td>数组</td><td><code>[]</code></td></tr><tr><td><code>index</code></td><td>发送目录索引文件。设置为 <code>false</code> 可禁用建立目录索引。</td><td>混合</td><td>“index.html”</td></tr><tr><td><code>lastModified</code></td><td>将 <code>Last-Modified</code> 的头设置为操作系统上该文件的上次修改日期。有效值包括 <code>true</code> 或 <code>false</code>。</td><td>布尔</td><td><code>true</code></td></tr><tr><td><code>maxAge</code></td><td>设置 Cache-Control 头的 max-age 属性（以毫秒或者 <a href="https://www.npmjs.org/package/ms">ms 格式</a>中的字符串为单位）</td><td>数字</td><td>0</td></tr><tr><td><code>redirect</code></td><td>当路径名是目录时重定向到结尾的“&#x2F;”。</td><td>布尔</td><td><code>true</code></td></tr><tr><td><code>setHeaders</code></td><td>用于设置随文件一起提供的 HTTP 头的函数。</td><td>函数</td><td></td></tr></tbody></table><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//options使用示例</span><span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  dotfiles<span class="token punctuation">:</span> <span class="token string">'ignore'</span><span class="token punctuation">,</span>  etag<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'htm'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  index<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  maxAge<span class="token punctuation">:</span> <span class="token string">'1d'</span><span class="token punctuation">,</span>  redirect<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  setHeaders<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> stat<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'x-timestamp'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/02/103.html"/>
      <url>/2025/02/103.html</url>
      
        <content type="html"><![CDATA[<p>#excalidraw 全栈开发</p><h2 id="1-一、Node-js"><a href="#1-一、Node-js" class="headerlink" title="1 一、Node.js"></a>1 一、Node.js</h2><h3 id="1-1-（一）使用模块的方法"><a href="#1-1-（一）使用模块的方法" class="headerlink" title="1.1 （一）使用模块的方法"></a>1.1 （一）使用模块的方法</h3><p>Node.js 中使用require方法引入模块</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span></code></pre><p>fs模块用来操作文件<br>path模块用来拼接路径<br>http模块用来构建web服务器</p><h3 id="1-2-（二）web服务器基本组成"><a href="#1-2-（二）web服务器基本组成" class="headerlink" title="1.2 （二）web服务器基本组成"></a>1.2 （二）web服务器基本组成</h3><h4 id="1-2-1-1-导入http模块"><a href="#1-2-1-1-导入http模块" class="headerlink" title="1.2.1 1.导入http模块"></a>1.2.1 1.导入http模块</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span></code></pre><h4 id="1-2-2-2-创建web实例"><a href="#1-2-2-2-创建web实例" class="headerlink" title="1.2.2 2.创建web实例"></a>1.2.2 2.创建web实例</h4><p>调用http.createServer()方法创建web实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">creatServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="1-2-3-3-绑定request事件用来监听网络请求"><a href="#1-2-3-3-绑定request事件用来监听网络请求" class="headerlink" title="1.2.3 3.绑定request事件用来监听网络请求"></a>1.2.3 3.绑定request事件用来监听网络请求</h4><pre class=" language-javascript"><code class="language-javascript">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只要有客户端请求就会触发request事件</span><span class="token comment" spellcheck="true">//举例返回console.log打印日志</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'print a log'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'参数一'</span><span class="token punctuation">,</span>参数二<span class="token punctuation">)</span>参数一：事件名称，认为是自定义的，公认request事件？也许参数二：回调函数，用来执行监听到客户端请求后的处理方法。</code></pre><h4 id="1-2-4-4-启动服务器"><a href="#1-2-4-4-启动服务器" class="headerlink" title="1.2.4 4.启动服务器"></a>1.2.4 4.启动服务器</h4><pre class=" language-javascript"><code class="language-javascript">server<span class="token punctuation">.</span><span class="token function">linsten</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http server running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">server<span class="token punctuation">.</span><span class="token function">linsten</span><span class="token punctuation">(</span>端口号，回调方法<span class="token punctuation">)</span></code></pre><h4 id="1-2-5-5-创建服务器的完整代码"><a href="#1-2-5-5-创建服务器的完整代码" class="headerlink" title="1.2.5 5.创建服务器的完整代码"></a>1.2.5 5.创建服务器的完整代码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">creatServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取客户端url地址</span>req<span class="token punctuation">.</span>url<span class="token comment" spellcheck="true">//获取http请求方法</span>req<span class="token punctuation">.</span>method<span class="token comment" spellcheck="true">//设置content-type响应头，解决中文乱码问题</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'text/html;chartset=utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将内容响应给客户端</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">linsten</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http server running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="1-3-（二）模块化"><a href="#1-3-（二）模块化" class="headerlink" title="1.3 （二）模块化"></a>1.3 （二）模块化</h3><h4 id="1-3-1-1-模块化分类"><a href="#1-3-1-1-模块化分类" class="headerlink" title="1.3.1 1.模块化分类"></a>1.3.1 1.模块化分类</h4><p>内置模块、自定义模块、第三方模块</p><h4 id="1-3-2-2-加载模块"><a href="#1-3-2-2-加载模块" class="headerlink" title="1.3.2 2.加载模块"></a>1.3.2 2.加载模块</h4><p>使用require()方法加载模块</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//加载自定义模块需要路径</span><span class="token keyword">const</span> 模块<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'模块名'</span><span class="token punctuation">)</span></code></pre><p>加载模块实际上是加载模块中moudle.exports&#x3D;{}中的内容</p><h4 id="1-3-3-3-自定义模块"><a href="#1-3-3-3-自定义模块" class="headerlink" title="1.3.3 3.自定义模块"></a>1.3.3 3.自定义模块</h4><p>module.exports &#x3D;&#x3D;&#x3D; exports</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//向module.exports上挂载一个username属性</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">'zs'</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>sayHello<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法</span></code></pre><h4 id="1-3-4-4-模块化规范CommonJS"><a href="#1-3-4-4-模块化规范CommonJS" class="headerlink" title="1.3.4 4.模块化规范CommonJS"></a>1.3.4 4.模块化规范CommonJS</h4><p>（1）每个模块内部，module代表该模块<br>（2）module变量是一个对象，exports是属性即对外接口<br>（3）加载模块就是加载module.exports属性</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/02/100.html"/>
      <url>/2025/02/100.html</url>
      
        <content type="html"><![CDATA[<p>[[2.express框架开发web服务器基础]]</p><h2 id="1-web服务器监听"><a href="#1-web服务器监听" class="headerlink" title="1 web服务器监听"></a>1 web服务器监听</h2><h4 id="1-1-1-需要express模块"><a href="#1-1-1-需要express模块" class="headerlink" title="1.1.1 需要express模块"></a>1.1.1 需要express模块</h4><p><a href="https://www.npmjs.com/package/express">express - npm (npmjs.com)</a></p><pre><code>npm i express</code></pre><h4 id="1-1-2-启动最基本的web服务"><a href="#1-1-2-启动最基本的web服务" class="headerlink" title="1.1.2 启动最基本的web服务"></a>1.1.2 启动最基本的web服务</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在没添加路由时，服务器启动后不打印log</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8090</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http server running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="2-增加基本功能"><a href="#2-增加基本功能" class="headerlink" title="2 增加基本功能"></a>2 增加基本功能</h2><h3 id="2-1-跨域功能"><a href="#2-1-跨域功能" class="headerlink" title="2.1 跨域功能"></a>2.1 跨域功能</h3><h4 id="2-1-1-cors模块"><a href="#2-1-1-cors模块" class="headerlink" title="2.1.1 cors模块"></a>2.1.1 cors模块</h4><p><a href="https://www.npmjs.com/package/cors">cors - npm (npmjs.com)</a><br>    npm i cors</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cors <span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-2-配置正文解析功能"><a href="#2-2-配置正文解析功能" class="headerlink" title="2.2 配置正文解析功能"></a>2.2 配置正文解析功能</h3><h4 id="2-2-1-body-parser模块"><a href="#2-2-1-body-parser模块" class="headerlink" title="2.2.1 body-parser模块"></a>2.2.1 body-parser模块</h4><p><a href="https://www.npmjs.com/package/body-parser">body-parser - npm (npmjs.com)</a><br>    &#x2F;&#x2F;只对post请求中body里的x-www-form-urlencoded 有效<br>    npm i body-parser</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bodyParser'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><h2 id="3-模块化设计"><a href="#3-模块化设计" class="headerlink" title="3 模块化设计"></a>3 模块化设计</h2><h3 id="3-1-路由模块化"><a href="#3-1-路由模块化" class="headerlink" title="3.1 路由模块化"></a>3.1 路由模块化</h3><p><a href="https://blog.csdn.net/LQlove1/article/details/126648958">路由模块化参考</a></p><h4 id="3-1-1-router模块"><a href="#3-1-1-router模块" class="headerlink" title="3.1.1 router模块"></a>3.1.1 router模块</h4><p><a href="https://www.npmjs.com/package/router">router - npm (npmjs.com)</a></p><pre><code>npm i router</code></pre><ul><li>路由模块</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//路由模块，放置在router/router.js文件中</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> routerhandle <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routerhandle/userhandle'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//内部设置路由</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeLog</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Time: '</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// define the home page route</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> routerhandle<span class="token punctuation">.</span>METHODNAME<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// define the about route</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'About birds'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过module.exports到处模块</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><ul><li>抽离路由模块中的处理函数，路由处理函数模块通常命名称routerhandle</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//一般放置在./routerhandle/userhandle问价夹中</span>exports<span class="token punctuation">.</span>METHODNAME1<span class="token operator">=</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理函数内容</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>METHODNAME2<span class="token operator">=</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理函数内容</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>导入并使用路由模块</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> userRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router/router'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//'./router/router'根据自己的路由模块地址更改</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span>userRouter<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  '/api '是指在自定义路由地址前加上/api路径</span></code></pre><h2 id="4-数据库连接"><a href="#4-数据库连接" class="headerlink" title="4 数据库连接"></a>4 数据库连接</h2><h3 id="4-1-MySQL数据库-Node-js连接MySQL数据的方法"><a href="#4-1-MySQL数据库-Node-js连接MySQL数据的方法" class="headerlink" title="4.1 MySQL数据库 ([[Node.js连接MySQL数据的方法]])"></a>4.1 MySQL数据库 ([[Node.js连接MySQL数据的方法]])</h3><p><a href="https://www.npmjs.com/package/mysql">mysql - npm (npmjs.com)</a></p><pre><code>npm i mysql</code></pre><ul><li>数据连接功能模块化</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//./db/index</span><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//建立数据库连接，应用级数据库连接用户不应该用root用户，账号密码注意不能明传</span><span class="token keyword">const</span> db <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">creatpool</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>host<span class="token punctuation">:</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//数据库的ip</span>user<span class="token punctuation">:</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//账号</span>password<span class="token punctuation">:</span><span class="token string">'admin123'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//密码</span>database<span class="token punctuation">:</span><span class="token string">'my_web_db'</span><span class="token comment" spellcheck="true">//指定要操作的数据库</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span> db<span class="token comment" spellcheck="true">// 服务器脚本中使用</span><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db/index'</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT 1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> results<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="5-前后端数据交互"><a href="#5-前后端数据交互" class="headerlink" title="5 前后端数据交互"></a>5 前后端数据交互</h2><h3 id="5-1-express-session模块"><a href="#5-1-express-session模块" class="headerlink" title="5.1 express-session模块"></a>5.1 express-session模块</h3><p><a href="https://www.npmjs.com/package/express-session">express-session - npm (npmjs.com)</a></p><p>session认证机制依托cookie实现，由于cookie默认不支持跨域访问，所以当涉及前端跨域请求后端接口时，需要额外的配置，才能实现Session认证</p><pre><code>    npm i express-session</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//session 使用方法</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>secret<span class="token punctuation">:</span><span class="token string">'任意值'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//任意字符串</span>resave<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>saveUninitizlized<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="5-2-JWT模块（JSON-Web-Token）"><a href="#5-2-JWT模块（JSON-Web-Token）" class="headerlink" title="5.2 JWT模块（JSON Web Token）"></a>5.2 JWT模块（JSON Web Token）</h3><p><a href="https://www.npmjs.com/package/express-jwt">express-jwt - npm (npmjs.com)</a></p><pre><code>npm i  jsonwebtoken express-jwt</code></pre><ul><li>jsonwebtoken 用于生成JWT字符串</li><li>express-jwt用于将JWT字符串还原成JSON对象</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//生成token字符串</span><span class="token keyword">const</span> jwt <span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token keyword">const</span> expressJWT <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-jwt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定义secret密钥</span><span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">'任意字符串'</span><span class="token keyword">const</span> tokenstr <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">:</span><span class="token string">''</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>secretKey<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>expireesIn<span class="token punctuation">:</span><span class="token string">'30s'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&amp;#123;username：''&amp;#125;需要加密的字符串，secretKey密钥，&amp;#123;expiresIn：'30s'&amp;#125;有效期</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>status<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>message<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>token<span class="token punctuation">:</span>tokenstr<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//还原字符串，使用express-jwt中间件还原</span><span class="token comment" spellcheck="true">//app.use注册全局中间件</span><span class="token comment" spellcheck="true">//expressJWT用来解析token</span><span class="token comment" spellcheck="true">//.unless用来指定那些路径不需要访问权限</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">expressJWT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>secret：secretKey<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>path<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">/</span><span class="token operator">^</span>\<span class="token operator">/</span>api\<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用res.user调用</span></code></pre><h2 id="6-其他功能"><a href="#6-其他功能" class="headerlink" title="6 其他功能"></a>6 其他功能</h2><h3 id="6-1-密码加密模块-bcryptjs模块"><a href="#6-1-密码加密模块-bcryptjs模块" class="headerlink" title="6.1 密码加密模块 bcryptjs模块"></a>6.1 密码加密模块 bcryptjs模块</h3><p><a href="https://www.npmjs.com/package/bcryptjs">bcryptjs - npm (npmjs.com)</a></p><pre><code>npm i bcryptjs@2.4.3</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> bcrypt <span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bcryptjs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> str <span class="token operator">=</span> bcrypt<span class="token punctuation">.</span><span class="token function">hashSync</span><span class="token punctuation">(</span>明文密码，随机盐的长度<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 异步方法：返回一个promise</span>bcrypt<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">'原始密码'</span><span class="token punctuation">,</span> <span class="token string">'加密之后的密码'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 同步方法：</span>bcrypt<span class="token punctuation">.</span><span class="token function">compareSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="6-2-对数据进行合法性校验-hapi-x2F-joi和-escook-x2F-express-joi"><a href="#6-2-对数据进行合法性校验-hapi-x2F-joi和-escook-x2F-express-joi" class="headerlink" title="6.2 对数据进行合法性校验 @hapi&#x2F;joi和@escook&#x2F;express-joi"></a>6.2 对数据进行合法性校验 @hapi&#x2F;joi和@escook&#x2F;express-joi</h3><p><a href="https://www.npmjs.com/package/@escook/express-joi">@escook&#x2F;express-joi - npm (npmjs.com)</a></p><ul><li><p>@hapi&#x2F;joi用于为表单中携带的每个数据项定义验证规则</p></li><li><p>@escook&#x2F;express-joi用于实现自动对表单数据进行验证</p><pre><code>  npm i @hapi/joi@17.1.0  npm i @escook/express-joi  string()字符串  alphanum：只能包含字母和数字a-z、A-Z、0-9  min(length):最小长度  max(length):最大长度  required():值是必填项，不能为undefined  pattern（正则表达式）：值必须符合正则表达式规则</code></pre></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导入 Joi 来定义验证规则</span><span class="token keyword">const</span> Joi <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'joi'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 导入 @escook/express-joi</span><span class="token keyword">const</span> expressJoi <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@escook/express-joi'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 解析 x-www-form-urlencoded 格式的表单数据</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 定义验证规则</span><span class="token comment" spellcheck="true">// 注意：如果客户端提交的某些参数项未在 schema 中定义，</span><span class="token comment" spellcheck="true">// 此时，这些多余的参数项默认会被忽略掉</span><span class="token keyword">const</span> userSchema <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2.1 校验 req.body 中的数据</span>  body<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    username<span class="token punctuation">:</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alphanum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token regex">/^[\S]&amp;#123;6,15&amp;#125;$/</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    repassword<span class="token punctuation">:</span> Joi<span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 2.2 校验 req.query 中的数据</span>  query<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alphanum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> Joi<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 2.3 校验 req.params 中的数据</span>  params<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    id<span class="token punctuation">:</span> Joi<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. 在路由中通过 expressJoi(userSchema) 的方式</span><span class="token comment" spellcheck="true">//    调用中间件进行参数验证</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/adduser/:id'</span><span class="token punctuation">,</span> <span class="token function">expressJoi</span><span class="token punctuation">(</span>userSchema<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> body <span class="token operator">=</span> req<span class="token punctuation">.</span>body  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4.1 错误级别中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 4.1 Joi 参数校验失败</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">Joi<span class="token punctuation">.</span>ValidationError</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      status<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> err<span class="token punctuation">.</span>message    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 4.2 未知错误</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    status<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    message<span class="token punctuation">:</span> err<span class="token punctuation">.</span>message  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 调用 app.listen 方法，指定端口号并启动web服务器</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Express server running at http://127.0.0.1:3001'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>模块化代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//schema模块中的代码</span><span class="token keyword">const</span> Joi <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'joi'</span><span class="token punctuation">)</span><span class="token keyword">const</span> username <span class="token operator">=</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alphanum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">const</span> password <span class="token operator">=</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token regex">/^[\S]&amp;#123;6,15&amp;#125;$/</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">const</span> repassword <span class="token operator">=</span> Joi<span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>exports<span class="token punctuation">.</span>reg_login_schema <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    body<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        username<span class="token punctuation">,</span>        password<span class="token punctuation">,</span>        repassword    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//服务器脚本中的代码</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 导入 @escook/express-joi</span><span class="token keyword">const</span> expressJoi <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@escook/express-joi'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 解析 x-www-form-urlencoded 格式的表单数据</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>reg_login_schema<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./schema/user'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//导入模块</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/adduser/:id'</span><span class="token punctuation">,</span> <span class="token function">expressJoi</span><span class="token punctuation">(</span>reg_login_schema<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> body <span class="token operator">=</span> req<span class="token punctuation">.</span>body  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="6-3-package-json-管理第三方模块"><a href="#6-3-package-json-管理第三方模块" class="headerlink" title="6.3 package.json 管理第三方模块"></a>6.3 package.json 管理第三方模块</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"body-parser"</span><span class="token punctuation">:</span> <span class="token string">"^1.20.2"</span><span class="token punctuation">,</span>    <span class="token string">"cores"</span><span class="token punctuation">:</span> <span class="token string">"^0.8.5"</span><span class="token punctuation">,</span>    <span class="token string">"cors"</span><span class="token punctuation">:</span> <span class="token string">"^2.8.5"</span><span class="token punctuation">,</span>    <span class="token string">"express"</span><span class="token punctuation">:</span> <span class="token string">"^4.18.2"</span><span class="token punctuation">,</span>    <span class="token string">"express-jwt"</span><span class="token punctuation">:</span> <span class="token string">"^8.4.1"</span><span class="token punctuation">,</span>    <span class="token string">"express-session"</span><span class="token punctuation">:</span> <span class="token string">"^1.17.3"</span><span class="token punctuation">,</span>    <span class="token string">"jsonwebtoken"</span><span class="token punctuation">:</span> <span class="token string">"^9.0.2"</span><span class="token punctuation">,</span>    <span class="token string">"moment"</span><span class="token punctuation">:</span> <span class="token string">"^2.29.4"</span><span class="token punctuation">,</span>    <span class="token string">"mysql"</span><span class="token punctuation">:</span> <span class="token string">"^2.18.1"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre><code>package.json不存在时执行npm init    可自动创建package.json文件npm install –save-dev  会自动将package.json中的模块安装到node-modules文件夹下</code></pre><p><strong>package有两种依赖：</strong></p><ol><li>dependencies —— 运行依赖，依赖的项该是正常运行该包时所需要的依赖项</li><li>devDependencies —— 开发依赖，开发的时候需要的依赖项，像一些进行单元测试之类的包。</li></ol><p>npm一键安装package.json里的所有依赖文件</p><pre><code>npm install</code></pre><p>只安装package.json里的dependencies（运行依赖）文件</p><pre><code>npm install --dependencies</code></pre><p>只安装package.json里的devDependencies（开发依赖）文件</p><pre><code>npm install --devDependencies</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/02/102.html"/>
      <url>/2025/02/102.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/Lin_DOUbleP/article/details/132447453">8种React组件间通信方式（类组件+函数组件）</a></p><h2 id="1-父组件-gt-子组件"><a href="#1-父组件-gt-子组件" class="headerlink" title="1 父组件 -&gt; 子组件"></a>1 父组件 -&gt; 子组件</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Component<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ChildByProps1</span> <span class="token keyword">extends</span>  <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>span<span class="token operator">></span>子组件<span class="token number">1</span>：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>txt<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ChildByProps2</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>txt<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> props<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span>span<span class="token operator">></span>子组件<span class="token number">2</span>：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>txt<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ChildByProps1 <span class="token keyword">from</span> <span class="token string">'./Component/ClassComponent/Parent2ChildByProps'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ChildByProps2 <span class="token keyword">from</span> <span class="token string">'./Component/FunctionComponent/Parent2ChildByProps'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Divider<span class="token punctuation">,</span>Button<span class="token punctuation">,</span> message<span class="token punctuation">,</span> Tooltip <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'container'</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Divider<span class="token operator">></span>父传子Props<span class="token operator">&lt;</span><span class="token operator">/</span>Divider<span class="token operator">></span>            <span class="token operator">&lt;</span>ChildByProps1 txt<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"俺是类组件"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ChildByProps1<span class="token operator">></span>            <span class="token operator">&lt;</span>ChildByProps2 txt<span class="token operator">=</span><span class="token string">"俺是函数组件"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ChildByProps2<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><p>获取react-bootstrap获取From.control的值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      value<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   handleChange <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Form<span class="token operator">></span>        <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Control type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> onChange<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/02/105.html"/>
      <url>/2025/02/105.html</url>
      
        <content type="html"><![CDATA[<p><strong>滚动事件的参数中核心属性</strong></p><p>clientWidth          可视区宽度<br>clientHeight        可视区高度<br>offsetWidth            可视区宽度<br>offsetHeight        可视区高度<br>scrollWidth          内容实际宽度<br>scrollHeight            内容实际高度<br>scrollTop              内容顶部距离可视区顶部距离<br>scrollLeft               内容左侧距离可视图左侧距离</p><p>实现原理</p><p>滚动加载的目的是用户滚动到页面的最底部时可以自动请求下一页的数据接口，所以问题是如何确认用户的页面滚动到了最底部。（api接口端需要将数据处理成分页数据）</p><p>列表触底条件：可视区高度+滚动距离&gt;&#x3D;内容实际高度（<strong>offsetHeight + scrollTop ≥ scrollHeight</strong>）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> ReactNode<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useRef <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> classnames <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">interface</span> <span class="token class-name">InfiniteScrollListProps</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    loading<span class="token punctuation">:</span> boolean    dataSource<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>T<span class="token operator">></span>    renderItem<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> ReactNode    renderSkeleton<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> ReactNode    hasMore<span class="token punctuation">:</span> boolean    loadMore<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>    className<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> InfiniteScrollList<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> InfiniteScrollListProps<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> loading<span class="token punctuation">,</span> dataSource<span class="token punctuation">,</span> renderItem<span class="token punctuation">,</span> renderSkeleton<span class="token punctuation">,</span> loadMore<span class="token punctuation">,</span> hasMore<span class="token punctuation">,</span> className <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> props    <span class="token keyword">const</span> containerRef <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> scrollEvent <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasMore <span class="token operator">||</span> loading<span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token comment" spellcheck="true">//可视区高度</span>            <span class="token keyword">let</span> scrollHeight <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token operator">?</span><span class="token punctuation">.</span>scrollHeight            <span class="token comment" spellcheck="true">//滚动高度</span>            <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>scrollTop            <span class="token comment" spellcheck="true">//列表内容实际高度</span>            <span class="token keyword">let</span> offsetHeight <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>offsetHeight            <span class="token keyword">if</span> <span class="token punctuation">(</span>offsetHeight <span class="token operator">+</span> scrollTop <span class="token operator">>=</span> scrollHeight<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'列表触底'</span><span class="token punctuation">)</span>                <span class="token function">loadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        containerRef<span class="token punctuation">.</span>current<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> scrollEvent<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            containerRef<span class="token punctuation">.</span>current<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> scrollEvent<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>hasMore<span class="token punctuation">,</span> loading<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">classnames</span><span class="token punctuation">(</span><span class="token string">'flex-1 flex flex-col overflow-y-auto'</span><span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>containerRef<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">renderItem</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>loading <span class="token operator">&amp;&amp;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> renderSkeleton<span class="token operator">?</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/02/101.html"/>
      <url>/2025/02/101.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_45605541/article/details/127354810">React18路由详解</a></p><h2 id="1-使用模块"><a href="#1-使用模块" class="headerlink" title="1 使用模块"></a>1 使用模块</h2><pre><code>npm i react-router-dom</code></pre><h2 id="2-react18的改变"><a href="#2-react18的改变" class="headerlink" title="2 react18的改变"></a>2 react18的改变</h2><ol><li>推荐使用函数组件</li><li>使用Routes替换原来的Switch组件</li><li>使用Navigate组件替换原来的Redirect组件</li><li>Route组件必须包裹在Routes组件里</li><li>路由规则是严格匹配，匹配成功就不向下继续匹配</li><li>定义路由规则匹配渲染组件语法改变component&#x2F;render&#x2F;children &#x3D;&gt; element&#x3D;{&lt;名称 &#x2F;&gt;}</li><li>新增了多个hook函数,useParams、useSearchParams、useNavigate、useRoutes等</li></ol><blockquote><p>[!tip]<br> component&#x2F;render&#x2F;children 都变成了element</p></blockquote><h2 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3 使用方法"></a>3 使用方法</h2><h3 id="3-1-在-src-x2F-index-js-文件中定义当前项目所使用的路由模式"><a href="#3-1-在-src-x2F-index-js-文件中定义当前项目所使用的路由模式" class="headerlink" title="3.1 在 src&#x2F;index.js 文件中定义当前项目所使用的路由模式"></a>3.1 在 src&#x2F;index.js 文件中定义当前项目所使用的<a href="https://so.csdn.net/so/search?q=%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F&spm=1001.2101.3001.7020">路由模式</a></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token comment" spellcheck="true">// 定义当前项目的路由模式BrowserRouter</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> BrowserRouter <span class="token keyword">as</span> Router <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">//Router 包裹App</span>  <span class="token operator">&lt;</span>Router<span class="token operator">></span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-在-src-x2F-App-jsx-组件中定义路由规则"><a href="#3-2-在-src-x2F-App-jsx-组件中定义路由规则" class="headerlink" title="3.2 在 src&#x2F;App.jsx 组件中定义路由规则"></a>3.2 在 src&#x2F;App.jsx 组件中定义路由规则</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">// 定义路由规则</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Routes<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link<span class="token punctuation">,</span> NavLink<span class="token punctuation">,</span> Navigate <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token comment" spellcheck="true">// Route用来定义路由规则的，它一定要在Routes组件中包裹起来，否则报错</span><span class="token comment" spellcheck="true">// 路由匹配成功后要渲染的组件</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./views/Home'</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'./views/About'</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>Routes<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/'</span> element<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/about'</span> element<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>About <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token comment" spellcheck="true">//重定向路由</span>        <span class="token operator">&lt;</span>NavLink end to<span class="token operator">=</span><span class="token string">"/home"</span> state<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Routes<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/02/108.html"/>
      <url>/2025/02/108.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载ubuntu-server系统"><a href="#1-下载ubuntu-server系统" class="headerlink" title="1 下载ubuntu server系统"></a>1 下载ubuntu server系统</h2><p><a href="https://releases.ubuntu.com/focal/">Ubuntu 20.04.6 LTS (Focal Fossa)</a></p><h2 id="2-安装ubuntu虚拟机"><a href="#2-安装ubuntu虚拟机" class="headerlink" title="2 安装ubuntu虚拟机"></a>2 安装ubuntu虚拟机</h2><h2 id="3-更换ubuntu的软件源"><a href="#3-更换ubuntu的软件源" class="headerlink" title="3 更换ubuntu的软件源"></a>3 更换ubuntu的软件源</h2><pre><code>备份cp /etc/apt/source.list /etc/apt/source.list.bak编辑vim /etc/apt/source.list保存并推出：wq</code></pre><blockquote><p>[!tip]<br>:wq保存时可能提示E212错误，是因为没有文件的编辑权限，此时使用 :w ! sudo tee %<br>%表示当前编辑的文件名字</p></blockquote><h2 id="4-配置ftp服务器和ssh服务"><a href="#4-配置ftp服务器和ssh服务" class="headerlink" title="4 配置ftp服务器和ssh服务"></a>4 配置ftp服务器和ssh服务</h2><p>安装ftp服务<br><strong><code>sudo apt-get update</code></strong><br><strong><code>sudo apt-get install vsftpd</code></strong><br>配置ftp账户<br><strong><code>sudo useradd -m ftpuser </code></strong><br><strong><code>sudo passwd ftpuser</code></strong><br>启动ftp服务<br><strong><code>sudo service vsftpd start</code></strong><br>安装ssh服务<br><strong><code>apt-get install openssh-server</code></strong><br>启动ssh服务<br><strong><code>/etc/init.d/ssh start</code></strong></p><blockquote><p>[!attention]<br>需要注意的是虚拟机和主机之间可能存在网络不通的问题。<br>解决方法：虚拟机网络设置选择NAT 模式，然后将虚拟网卡选择自动获取ip地址即可，不需要考虑虚拟机ip和主机ip是否在同一网段。 </p></blockquote><h2 id="5-通过Filezilla与ubuntu虚拟机进行文件传输"><a href="#5-通过Filezilla与ubuntu虚拟机进行文件传输" class="headerlink" title="5 通过Filezilla与ubuntu虚拟机进行文件传输"></a>5 通过Filezilla与ubuntu虚拟机进行文件传输</h2><blockquote><p>[!attention]<br>需注意的问题有3点</p></blockquote><h3 id="5-1-Filezilla与Ubuntu进行ftp连接是使用的账户和密码是指ftp服务器的账户和密码，不是Ubuntu系统的账户和密码"><a href="#5-1-Filezilla与Ubuntu进行ftp连接是使用的账户和密码是指ftp服务器的账户和密码，不是Ubuntu系统的账户和密码" class="headerlink" title="5.1 Filezilla与Ubuntu进行ftp连接是使用的账户和密码是指ftp服务器的账户和密码，不是Ubuntu系统的账户和密码"></a>5.1 Filezilla与Ubuntu进行ftp连接是使用的账户和密码是指ftp服务器的账户和密码，不是Ubuntu系统的账户和密码</h3><p>即配置ftp账户产生的ftpuser<br><strong><code>sudo useradd -m ftpuser </code></strong><br>**&#96;sudo passwd ftpuser</p><h3 id="5-2-Filezilla与虚拟机进行文件传输的时候提示无法传输文件，在排除网络和权限问题后，可能是ftp服务器在配置过程中产生错误，注意检查配置步骤。其中ftp服务器配置的文件夹名字不代表ftp服务器的账户名称，ftp共享文件夹需要提前创建好。"><a href="#5-2-Filezilla与虚拟机进行文件传输的时候提示无法传输文件，在排除网络和权限问题后，可能是ftp服务器在配置过程中产生错误，注意检查配置步骤。其中ftp服务器配置的文件夹名字不代表ftp服务器的账户名称，ftp共享文件夹需要提前创建好。" class="headerlink" title="5.2 Filezilla与虚拟机进行文件传输的时候提示无法传输文件，在排除网络和权限问题后，可能是ftp服务器在配置过程中产生错误，注意检查配置步骤。其中ftp服务器配置的文件夹名字不代表ftp服务器的账户名称，ftp共享文件夹需要提前创建好。"></a>5.2 Filezilla与虚拟机进行文件传输的时候提示无法传输文件，在排除网络和权限问题后，可能是ftp服务器在配置过程中产生错误，注意检查配置步骤。其中ftp服务器配置的文件夹名字不代表ftp服务器的账户名称，ftp共享文件夹需要提前创建好。</h3><h2 id="6-ubuntu安装离线安装nodejs"><a href="#6-ubuntu安装离线安装nodejs" class="headerlink" title="6 ubuntu安装离线安装nodejs"></a>6 ubuntu安装离线安装nodejs</h2><blockquote><p>[!warning]<br>注意nodejs版本，下载x64版本 </p></blockquote><h3 id="6-1-下载node-v18-12-0-linux-x64-tar-gz软件包"><a href="#6-1-下载node-v18-12-0-linux-x64-tar-gz软件包" class="headerlink" title="6.1 下载node-v18.12.0-linux-x64.tar.gz软件包"></a>6.1 下载node-v18.12.0-linux-x64.tar.gz软件包</h3><h3 id="6-2-解压缩"><a href="#6-2-解压缩" class="headerlink" title="6.2 解压缩"></a>6.2 解压缩</h3><pre><code>tar -zxvf node-v18.12.0-linux-x64.tar.gz</code></pre><h3 id="6-3-创建软链接"><a href="#6-3-创建软链接" class="headerlink" title="6.3 创建软链接"></a>6.3 创建软链接</h3><p>解压后的程序需要与&#x2F;usr&#x2F;local&#x2F;bin进行软链接，或者将解压后的程序放在该目录下，否在需要使用<br>    ln -s &#x2F;home&#x2F;node-v18.12.0-linux-x64 &#x2F;usr&#x2F;local&#x2F;bin<br>然后使用<br>    ln -s &#x2F;home&#x2F;node-v18.12.0-linux-x64 &#x2F;usr&#x2F;local&#x2F;bin<br>进行全局设置</p><blockquote><p>[!attention]<br>需要注意的是如果程序没有链接到 &#x2F;usr&#x2F;local&#x2F;bin的话，只进行全局链接不行</p></blockquote><h2 id="7-安装-Nginx-作为web服务器用于运行前端服务"><a href="#7-安装-Nginx-作为web服务器用于运行前端服务" class="headerlink" title="7 安装[[Nginx]]作为web服务器用于运行前端服务"></a>7 安装[[Nginx]]作为web服务器用于运行前端服务</h2><h3 id="7-1-安装Nginx"><a href="#7-1-安装Nginx" class="headerlink" title="7.1 安装Nginx"></a>7.1 安装Nginx</h3><pre><code> apt install nginx</code></pre><h3 id="7-2-配置Nginx"><a href="#7-2-配置Nginx" class="headerlink" title="7.2 配置Nginx"></a>7.2 配置Nginx</h3><p>nginx的默认路径是<code>/etc/nginx</code>，它的下面有两个文件夹,<code>sites-available</code>和<code>sites-enabled</code>,第一个文件夹存放的就是server配置，第二个文件夹是激活并使用的server配置（就是sites-available下server配置的快捷方式）。</p><pre><code>sudo vim /etc/nginx/sites-available/myreact</code></pre><p>输入如下内容：</p><pre><code>server &#123; listen 8080; root 路径/build; # build文件夹的绝对路径 index index.html index.htm; client_max_body_size 20M; keepalive_timeout 10; &#125;</code></pre><p>加入下年的部分才可以访问路由地址</p><pre><code>location / &#123; # ... # 增加下列命令， index.html 可换为项目中使用的其它文件名  try_files  $uri $uri/ /index.html;   &#125;</code></pre><blockquote><p>[!attention]<br>location &#x2F; {}要放在 server { }内<br><a href="https://cloud.tencent.com/developer/article/1855852">Umi&amp;React打包部署到非根目录及刷新报错404的问题解决-腾讯云开发者社区-腾讯云</a></p></blockquote><p>将配置链接到sites-available中激活配置<br>    sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;myreact &#x2F;etc&#x2F;nginx&#x2F;sites-enabled<br>检测nginx配置有没有问题</p><pre><code>nginx -t</code></pre><p>重启nginx</p><pre><code>systemctl restart nginx</code></pre><blockquote><p>[!warning]<br>从主机访问虚拟机中的web服务需要注意<br>1.在虚拟机软件中建立主机端口和虚拟机端口的映射， 编辑 -&gt; 虚拟网络编辑器 -&gt; NAT设置<br>2.打开虚拟机和主机防火墙对应的端口，不然无法访问。ubuntu使用ufw allow 8080&#x2F;tcp，windows添加防火墙进入规则。</p></blockquote><h2 id="8-pm2管理node-api服务"><a href="#8-pm2管理node-api服务" class="headerlink" title="8 pm2管理node api服务"></a>8 pm2管理node api服务</h2><p>pm2管理工具相关优势：<br>（1）动态监控文件变动，0秒热启动<br>（2）对 CPU 进行负载均衡<br>（3）监控 CPU、内存的使用状况<br>（4）自动重启异常服务</p><p>pm2相关命令：</p><pre><code>启动程序：pm2 start &lt;app_name|id|all&gt;列举进程：pm2 list退出程序：pm2 stop &lt;app_name|id|all&gt;重起应用：pm2 restart &lt;app_name|id|all&gt;删除应用：pm2 delete &lt;app_name|id|all&gt;程序信息：pm2 describe &lt;app_name|id|all&gt;监控：pm2 monit实时集中log处理: pm2 logs实时集中log处理: pm2 logs &lt;app_name|id&gt;npm i pm2 -g #全局安装pm2</code></pre><blockquote><p>[!attention]<br>由于我的nodejs源码没有安装在 &#x2F;usr&#x2F;local&#x2F;src中，而是放在&#x2F;home&#x2F;selfapp中，node是通过软连接链接到&#x2F;usr&#x2F;local&#x2F;bin和&#x2F;usr&#x2F;bin中，导致pm2没办法执行，使用find &#x2F; -name pm2找到pm2，然后将pm2软连接到&#x2F;usr&#x2F;local&#x2F;bin和&#x2F;usr&#x2F;bin中，若还不行，说明 &#x2F;usr&#x2F;local&#x2F;bin 这个文件夹没有加入到环境变量中，系统找不到。所以要将该路径加入到 <del>&#x2F;.bash_profile 中，在$PATH后面加上:&#x2F;usr&#x2F;local&#x2F;bin（冒号别忘了）[找不到pm2命令解决方法](<a href="https://www.cnblogs.com/goloving/p/9231894.html#">https://www.cnblogs.com/goloving/p/9231894.html#</a>:</del>:text&#x3D;1%E3%80%81%E5%AE%89%E8%A3%85%20pm2%EF%BC%8C%E6%89%A7%E8%A1%8C%EF%BC%9Anpm%20install%20-g%20pm2%202%E3%80%81%E8%BE%93%E5%85%A5%20pm2%20-v,pm2%20%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%87%BA%E6%9D%A5%E5%BE%88%E5%A4%9A%E8%B7%AF%E5%BE%84%EF%BC%8C%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%B1%E6%98%AF%20%2Fusr%2Flocal%2Fsrc%2Fnodejs%2Fbin%2Fpm2%EF%BC%8C%E8%BF%98%E6%9C%89%E5%A5%BD%E5%87%A0%E4%B8%AA%E5%88%AB%E7%9A%84%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E6%9C%89%E5%95%A5%E7%94%A8%20%E9%82%A3%E4%B9%88%E5%B0%B1%E8%BF%9B%E5%85%A5%20%2Fusr%2Flocal%2Fsrc%2Fnodejs%2Fbin%20%E8%BF%99%E4%B8%AA%E7%9B%AE%E5%BD%95%EF%BC%8C%E8%BE%93%E5%85%A5.%2Fpm2%20-v%20%E5%8F%91%E7%8E%B0%E6%AD%A3%E5%B8%B8%EF%BC%8C%E8%AF%B4%E6%98%8E%E8%BF%99%E4%B8%AA%E7%9B%AE%E5%BD%95%E6%98%AF%E5%AF%B9%E7%9A%84%E3%80%82)</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266 驱动 1.44 寸屏幕（例程问题）</title>
      <link href="/2022/08/2536776.html"/>
      <url>/2022/08/2536776.html</url>
      
        <content type="html"><![CDATA[<h1 id="ESP8266驱动1-44寸TFT屏幕-例程问题"><a href="#ESP8266驱动1-44寸TFT屏幕-例程问题" class="headerlink" title="ESP8266驱动1.44寸TFT屏幕(例程问题)"></a>ESP8266驱动1.44寸TFT屏幕(例程问题)</h1><h2 id="一、接线说明"><a href="#一、接线说明" class="headerlink" title="一、接线说明"></a>一、接线说明</h2><!-- ![1.44寸TFT与8266接线说明](1.44%E5%AF%B8TFT%E4%B8%8E8266%E6%8E%A5%E7%BA%BF%E8%AF%B4%E6%98%8E.jpg) --><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073a339c5e9.jpeg" alt="1.44寸TFT与8266接线说明"></p><!--![8266与1.44TFT屏幕引脚对应](8266%E4%B8%8E1.44TFT%E5%B1%8F%E5%B9%95%E5%BC%95%E8%84%9A%E5%AF%B9%E5%BA%94.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073ae44edf9.jpeg" alt="8266与1.44TFT屏幕引脚对应"></p><h2 id="二、引脚对应"><a href="#二、引脚对应" class="headerlink" title="二、引脚对应"></a>二、引脚对应</h2><!--![6875152-d2e17763dffd54ec](6875152-d2e17763dffd54ec.png)--><p><img src="http://ezblog.gnway.cc/i/2022/08/23/6304a3d194fd6.png" alt="引脚对应图"></p><p>D1 — 5</p><p>D2 — 4</p><p>D3 — 0</p><h2 id="三、修改例程"><a href="#三、修改例程" class="headerlink" title="三、修改例程"></a>三、修改例程</h2><!--![例程](%E4%BE%8B%E7%A8%8B.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073bdf3ddb6.jpeg" alt="例程"></p><p>将D1、D2、D3改成5、4、0然后编译上传即可</p><!--![例程修改后](%E4%BE%8B%E7%A8%8B%E4%BF%AE%E6%94%B9%E5%90%8E.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073bfaf191c.jpeg" alt="例程修改后.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> ESP8266 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP8266 </tag>
            
            <tag> 硬件编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 FreeRTOS</title>
      <link href="/2022/08/2527629.html"/>
      <url>/2022/08/2527629.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是FreeRTOS"><a href="#什么是FreeRTOS" class="headerlink" title="什么是FreeRTOS"></a>什么是FreeRTOS</h1><blockquote><p>1.Free 即免费的，RTOS 全称是 Real Time Operating System，中文就是实时操作系统。注意，RTOS 不是指某一个确定的系统，而是指一类系统。比如 uC&#x2F;OS，FreeRTOS，RTX，RT-Thread 等这些都是 RTOS 类操作系统。<br>2.操作系统允许多个任务同时运行，这个叫做多任务。实际上，一个处理器核心在某一时刻只能运行一个任务。操作系统中任务调度器的责任就是决定在某一时刻究竟运行哪个任务。任务调度在各个任务之间的切换非常快，就给人们造成了同一时刻有多个任务同时运行的错觉。<br>3.某些操作系统给每个任务分配同样的运行时间，时间到了就轮到下一个任务，比如Unix 操作系统。 FreeRTOS 操作系统则是由用户给每个任务分配一个任务优先级，任务调度器就可以根据此优先级来决定下一刻应该运行哪个任务。<br>4.FreeRTOS 是 RTOS 系统的一种，FreeRTOS 十分的小巧，可以在资源有限的微控制器中运行，当然，FreeRTOS 不仅局限于在微控制器中使用。但从文件数量上来看 FreeRTOS 要比uC&#x2F;OSII 和 uC&#x2F;OSIII 小的多。</p></blockquote><p>FreeRTOS资料</p><p><a href="http://www.freertos.org/">www.freertos.org</a></p>]]></content>
      
      
      <categories>
          
          <category> ESP8266 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP8266 </tag>
            
            <tag> 硬件编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266 windows 开发环境搭建</title>
      <link href="/2022/08/2557392.html"/>
      <url>/2022/08/2557392.html</url>
      
        <content type="html"><![CDATA[<h1 id="ESP8266-windows开发环境搭建"><a href="#ESP8266-windows开发环境搭建" class="headerlink" title="ESP8266 windows开发环境搭建"></a>ESP8266 windows开发环境搭建</h1><h2 id="一、软件准备"><a href="#一、软件准备" class="headerlink" title="一、软件准备"></a>一、软件准备</h2><p>安信可一体化开发环境网上搜索即可</p><h2 id="二、SDK编译"><a href="#二、SDK编译" class="headerlink" title="二、SDK编译"></a>二、SDK编译</h2><h3 id="1-添加环境变量"><a href="#1-添加环境变量" class="headerlink" title="1.添加环境变量"></a>1.添加环境变量</h3><p>安信可一体化开发环境解压后，将cygwin文件夹下的bin文件夹和opt\xtensa-lx106-elf\bin文件夹添加至系统环境变量。</p><!--![安信可一体化开发环境](%E5%AE%89%E4%BF%A1%E5%8F%AF%E4%B8%80%E4%BD%93%E5%8C%96%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073e67bc3eb.jpeg" alt="安信可一体化开发环境"></p><!--![添加环境变量](%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073e8773b4b.jpeg" alt="添加环境变量"></p><h3 id="2-准备官方SDK"><a href="#2-准备官方SDK" class="headerlink" title="2.准备官方SDK"></a>2.准备官方SDK</h3><p>将官方SDK包里的third_party和driver_lib文件夹下的Makefile文件删除。导入eclipse。</p><!--![官方sdk准备](%E5%AE%98%E6%96%B9sdk%E5%87%86%E5%A4%87.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073ea761e84.jpeg" alt="官方sdk准备"></p><p>选择Existing Code as Makefile Project</p><!--![导入eclipse](%E5%AF%BC%E5%85%A5eclipse.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073ef1b7ff8.jpeg" alt="导入eclipse"><br>选择SDK文件夹取消c++选项，选择Cygwin GCC。</p><!--![eclipse导入设置](eclipse%E5%AF%BC%E5%85%A5%E8%AE%BE%E7%BD%AE.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63074767a3221.jpeg" alt="eclipse导入设置"></p><h3 id="3-修改SDK的Makefile文件设置。"><a href="#3-修改SDK的Makefile文件设置。" class="headerlink" title="3.修改SDK的Makefile文件设置。"></a>3.修改SDK的Makefile文件设置。</h3><!--![修改Makefile文件](%E4%BF%AE%E6%94%B9Makefile%E6%96%87%E4%BB%B6.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073f1595e99.jpeg" alt="修改Makefile文件"></p><p>如图将SDK根目录Makefile文件中第25行至2行的进行更改这几行和官方<a href="https://www.espressif.com/sites/default/files/documentation/2a-esp8266-sdk_getting_started_guide_cn.pdf">2a-esp8266-sdk_getting_started_guide_cn.pdf</a>中的sdk编译选项对应关系如图。</p><!--![sdk编译设置](sdk%E7%BC%96%E8%AF%91%E8%AE%BE%E7%BD%AE.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073f452b386.jpeg" alt="sdk编译设置.jpeg"></p><pre class=" language-c"><code class="language-c">    BOOT<span class="token operator">?</span><span class="token operator">=</span>new    # boot版本选择，old<span class="token operator">=</span>boot_v1<span class="token number">.1</span><span class="token punctuation">,</span>new<span class="token operator">=</span>boot_v1<span class="token number">.2</span><span class="token operator">+</span><span class="token punctuation">,</span>none<span class="token operator">=</span>none    APP<span class="token operator">?</span><span class="token operator">=</span><span class="token number">1</span>       #固件升级方式选择，Firmware Over<span class="token operator">-</span>The<span class="token operator">-</span>Air（FOTA，⽀持云端升级）和                    <span class="token macro property">#non-FOTA（不⽀持云端升级）的 BIN ⽂件，0=不支持云端升级，1，2=支持云</span>                 #端升级。<span class="token number">0</span><span class="token operator">=</span>eagle<span class="token punctuation">.</span>flash<span class="token punctuation">.</span>bin<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">=</span>user1<span class="token punctuation">.</span>bin<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">=</span>user2<span class="token punctuation">.</span>bin    SPI_SPEED<span class="token operator">?</span><span class="token operator">=</span><span class="token number">40</span># 芯片频率选择，根据实际选择，一般40MHz    SPI_MODE<span class="token operator">?</span><span class="token operator">=</span>QIO#下载方式短则选QIO即可    SPI_SIZE_MAP<span class="token operator">?</span><span class="token operator">=</span><span class="token number">6</span> #FLASH芯片容量选择，<span class="token number">1</span><span class="token operator">=</span>256KB<span class="token operator">=</span><span class="token function">2Kbit</span><span class="token punctuation">(</span>一般不支持<span class="token punctuation">)</span>，                  #<span class="token number">2</span><span class="token operator">=</span>1MB<span class="token operator">=</span><span class="token function">8Mbit</span><span class="token punctuation">(</span>512KB<span class="token operator">+</span>512KB<span class="token punctuation">)</span>，#<span class="token number">3</span><span class="token operator">=</span>2MB<span class="token operator">=</span><span class="token function">16Mbit</span><span class="token punctuation">(</span>512KB<span class="token operator">+</span>512KB<span class="token punctuation">)</span>，                  #<span class="token number">4</span><span class="token operator">=</span>8MB<span class="token operator">=</span><span class="token function">32Mbit</span><span class="token punctuation">(</span>512KB<span class="token operator">+</span>512KB<span class="token punctuation">)</span> ，                  #<span class="token number">5</span><span class="token operator">=</span>2MB<span class="token operator">=</span>16Mbit<span class="token operator">-</span><span class="token function">C1</span><span class="token punctuation">(</span>1024KB<span class="token operator">+</span>1024KB<span class="token punctuation">)</span>，                  #<span class="token number">6</span><span class="token operator">=</span>8MB<span class="token operator">=</span>32Mbit<span class="token operator">-</span><span class="token function">C1</span><span class="token punctuation">(</span>1024KB<span class="token operator">+</span>1024KB<span class="token punctuation">)</span> </code></pre><!--![Makefile编译设置](Makefile%E7%BC%96%E8%AF%91%E8%AE%BE%E7%BD%AE.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073f63a7aca.jpeg" alt="Makefile编译设置"></p><p>设置好后，clean project和重新build project就可以了生成boot.bin和user1.4096.new.6.bin和flash下载地址。</p><!--![编译成功](%E7%BC%96%E8%AF%91%E6%88%90%E5%8A%9F.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073f8fe4748.jpeg" alt="编译成功"></p><h2 id="三、固件下载"><a href="#三、固件下载" class="headerlink" title="三、固件下载"></a>三、固件下载</h2><h3 id="1-文件准备"><a href="#1-文件准备" class="headerlink" title="1.文件准备"></a>1.文件准备</h3><p>按照上述编译方法编译SDK后在SDK根目录的bin文件夹下生成.bin文件，如图所示</p><!--![bin文件](.bin%E6%96%87%E4%BB%B6.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/6307482908f2e.jpeg" alt="bin文件"></p><p>其中user.4096.new.6.bin 在upgrade文件夹下。</p><h3 id="2-软件准备。"><a href="#2-软件准备。" class="headerlink" title="2.软件准备。"></a>2.软件准备。</h3><p>可以用来下载固件的软件有flash_download_tool_3.9.0、FLASH_DOWNLOAD_TOOLS_V3.6.3、ESP8266Flasher和esptool可以使用，推荐使用FLASH_DOWNLOAD_TOOLS_V3.6.3，除esptool没用过之外，其他的都有坑，后面专门讲解。</p><!--![flash-down-tool](flash-down-tool.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073fe40144a.jpeg" alt="flash-down-tool"></p><p>根据官方<a href="https://www.espressif.com/sites/default/files/documentation/2a-esp8266-sdk_getting_started_guide_cn.pdf">2a-esp8266-sdk_getting_started_guide_cn.pdf</a>中下载地址的表格查看对应的flash地址。</p><!--![flash地址关系](flash%E5%9C%B0%E5%9D%80%E5%85%B3%E7%B3%BB.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/6307402b66984.jpeg" alt="flash地址关系"></p><p>根据Makefile中设置的flash容量选择地址。</p><pre class=" language-c"><code class="language-c">SPI_SIZE_MAP<span class="token operator">?</span><span class="token operator">=</span><span class="token number">6</span> #FLASH芯片容量选择，#<span class="token number">1</span><span class="token operator">=</span>256KB<span class="token operator">=</span><span class="token function">2Kbit</span><span class="token punctuation">(</span>一般不支持<span class="token punctuation">)</span> <span class="token number">2</span><span class="token operator">=</span>1MB<span class="token operator">=</span><span class="token function">8Mbit</span><span class="token punctuation">(</span>512KB<span class="token operator">+</span>512KB<span class="token punctuation">)</span> <span class="token number">3</span><span class="token operator">=</span>2MB<span class="token operator">=</span><span class="token function">16Mbit</span><span class="token punctuation">(</span>512KB<span class="token operator">+</span>512KB<span class="token punctuation">)</span>，#<span class="token number">4</span><span class="token operator">=</span>8MB<span class="token operator">=</span><span class="token function">32Mbit</span><span class="token punctuation">(</span>512KB<span class="token operator">+</span>512KB<span class="token punctuation">)</span> <span class="token number">5</span><span class="token operator">=</span>2MB<span class="token operator">=</span>16Mbit<span class="token operator">-</span><span class="token function">C1</span><span class="token punctuation">(</span>1024KB<span class="token operator">+</span>1024KB<span class="token punctuation">)</span> <span class="token number">6</span><span class="token operator">=</span>8MB<span class="token operator">=</span>32Mbit<span class="token operator">-</span><span class="token function">C1</span><span class="token punctuation">(</span>1024KB<span class="token operator">+</span>1024KB<span class="token punctuation">)</span> </code></pre><p>例如SPI_SIZE_MAP设置为6.对应4096KB（1024+1024）的flash芯片，地址对应0x3FB000 、0x3FC000、0x3FE000、0x0000、0x01000这一列，按照对应关系填固件下载软件即可，其中6对应FLASH_DOWNLOAD_TOOLS中的FLASHSIZE选择32Mbit-C1，其他对应关系如图。</p><p><strong>注</strong> 取消Donotchgbin勾选。选中它后软件的FLASHSIZE使用默认设置4Mbit(256KB+256KB)，对应spi_size_map&#x3D;0。</p><p>SPI_SIZE_MAP设置和FLASH_DOWNLOAD_TOOLS软件中的设置一致时，芯片上电后串口显示如图mismatch map 4是Makefile文件中的SPI_SIZE_MAP设置，spi_size_map 0是FLASH_DOWNLOAD_TOOLS软件中FLASH SIZE的设置。一般只要两者对应都能正确下载固件。但是SPI_SIZE_MAP&#x3D;1或0不行。编译会提示”The flash map is not supported”。</p><!--![spisize设置串口显示](spisize%E8%AE%BE%E7%BD%AE%E4%B8%B2%E5%8F%A3%E6%98%BE%E7%A4%BA.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/6307405fd1937.jpeg" alt="spisize设置串口显示"></p><p>选择正确的地址和频率后即可下载固件，正确运行的串口如图所示。正确输出hello world！！！！</p><!--![成功执行](%E6%88%90%E5%8A%9F%E6%89%A7%E8%A1%8C.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63074081e1508.jpeg" alt="成功执行"></p><h1 id="四、坑"><a href="#四、坑" class="headerlink" title="四、坑"></a><strong>四、坑</strong></h1><h2 id="一、软件准备的坑。"><a href="#一、软件准备的坑。" class="headerlink" title="一、软件准备的坑。"></a>一、软件准备的坑。</h2><p>​推荐使用<strong>安信可的一体化编译工具</strong>，因为要使用cygwin和xtensa-lx106-elf这两个编译工具，其中cygwin相当于一个下载器，自己安装很难搞明白具体应该安装那些工具（其中工具列表有上千甚至上万个），<strong>而官方提供的xtensa-lx106-elf不可用</strong> ，至少缺少xt-xcc.exe这个工具，而安信可的工具已将这两个工具配置好了，免安装，只需要按照上面讲的配置环境变量就可以正常使用。</p><p><strong>注</strong> 安装目录不能有中文字符。 </p><h2 id="二、SDK的坑"><a href="#二、SDK的坑" class="headerlink" title="二、SDK的坑"></a>二、SDK的坑</h2><p>​对纯新手小白来说，很难弄清楚要将<strong>driver_lib</strong>文件下的<strong>Makefile</strong>文件和<strong>third_party</strong>文件夹删掉，并且将example文件夹下的demo文件夹复制到根目录。还有就是根目录下的Makefile设置。</p><h2 id="三、固件下载软件的坑"><a href="#三、固件下载软件的坑" class="headerlink" title="三、固件下载软件的坑"></a>三、固件下载软件的坑</h2><h3 id="1-flash-dowmload-tools3-9-0"><a href="#1-flash-dowmload-tools3-9-0" class="headerlink" title="1.flash_dowmload_tools3.9.0"></a>1.flash_dowmload_tools3.9.0</h3><p>固件下载软件有很大的坑，特别是官方的flash_dowmload_tools3.9.0版，如图所示flash_dowmload_tools3.9.0版不支持选择FLASH SIZE，只能使用默认的SPI_SIZE_MAP&#x3D;0，对应4Mbit(256+256)，若是碰巧你的开发板使用的相同大小的flash可能碰巧可以正常使用，否则看命。</p><!--![flash_download_tool_3.9.0](flash_download_tool_3.9.0.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/630740ba558c3.jpeg" alt="flash_download_tool_3.9.0"></p><h3 id="2-ESP8266flasher"><a href="#2-ESP8266flasher" class="headerlink" title="2.ESP8266flasher"></a>2.ESP8266flasher</h3><p>ESP8266flasher也能用，也可以选择flash size，但是这个软件版本很多，每个都有一些细小的差别，如图。</p><!--![ESP8266flasher](ESP8266flasher.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/630740e6dbf3b.jpeg" alt="ESP8266flasher"></p><!--![esp8266flasher2](esp8266flasher2.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63074107ea2b8.jpeg" alt="esp8266flasher2"></p><p>ESP8266flasher存在一个问题不支持选择SPI_SIZE_MAP&#x3D;5或6[5&#x3D;2MB&#x3D;16Mbit-C1(1024KB+1024KB) 6&#x3D;8MB&#x3D;32Mbit-C1(1024KB+1024KB) ],若使用的4MB的flash，如果碰巧设置SPI_SIZE_MAP&#x3D;4下载后就正常，如果设置6，下载过程也正常，但是无法正常运行。</p><p><strong>注</strong> 不论固件下载软件的FLASH SIZE如何选择，固件下载过程都正常，只有上电运行的使用后才会提示不可用。因此还是推荐使用FLASH_DOWNLOAD_TOOLS_V3.6.3，正确选择FLASHSIZE就可以了。</p><p><em>另外，经过测试除SPI_SIZE_MAP&#x3D;0或1外，只要Makefile和固件下载软件的flash地址和flash size设置对应上就可以正确运行。推测原因是由于容量大的FLASH芯片地址兼容容量小的FLASH芯片地址，但是如果存储的.bin文件过大超过了地址范围可能会出问题，建议正确选择FLASH芯片容量。</em></p><p>最后，最坑的就是乐鑫官方提供的工具坑最多，对新手很不友好。对了官方的lubuntu系统编译按照官方<a href="https://www.espressif.com/sites/default/files/documentation/2a-esp8266-sdk_getting_started_guide_cn.pdf">2a-esp8266-sdk_getting_started_guide_cn.pdf</a>提示操作即可，注意给SDK文件夹授权，出问题的主要原因还是在后边的固件下载工具上,不在单独写了。</p><pre class=" language-linux"><code class="language-linux">文件夹授权命令chmod -R 777 文件地址</code></pre>]]></content>
      
      
      <categories>
          
          <category> ESP8266 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP8266 </tag>
            
            <tag> 硬件编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266 固件下载以及 lua 电灯程序测试</title>
      <link href="/2022/08/2520574.html"/>
      <url>/2022/08/2520574.html</url>
      
        <content type="html"><![CDATA[<h1 id="ESP8266固件下载及lua点灯程序测试"><a href="#ESP8266固件下载及lua点灯程序测试" class="headerlink" title="ESP8266固件下载及lua点灯程序测试"></a>ESP8266固件下载及lua点灯程序测试</h1><h2 id="一、固件下载"><a href="#一、固件下载" class="headerlink" title="一、固件下载"></a>一、固件下载</h2><p>资料准备：固件文件和下载工具</p><blockquote><p>固件文件：1.nodemcu_float_0.9.6-dev_20150704.bin</p><p>​                  2.nodemcu_integer_0.9.6-dev_20150704.bin</p><p>​                  3.nodemcu-firmware_v20150213.6.bin</p></blockquote><p>固件文件构建基本开发环境，决定使用不同的开发语言进行开发。</p><blockquote><p>下载工具：nodemcu-flasher-master\Win64\Release\ESP8266Flasher.exe</p></blockquote><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073961f4021.jpeg" alt="固件准备.jpeg"></p><p><img src="http://ezblog.gnway.cc/i/2022/08/25/630739846e050.jpeg" alt="固件下载.jpeg"></p><p><img src="http://ezblog.gnway.cc/i/2022/08/25/630739cb2e1ce.png" alt="固件参数设置.png"></p><h2 id="二、ESPlorer"><a href="#二、ESPlorer" class="headerlink" title="二、ESPlorer"></a>二、ESPlorer</h2><p>ESPlorer需要JDK8u251环境经实验jdk8u291和jdk17都不能运行，且安装jdk8u251后要将其余JDK卸载干净否则仍不能运行。</p><p><img src="http://ezblog.gnway.cc/i/2022/08/25/630739ed9956d.jpeg" alt="lua代码编译上传.jpeg"></p><p>ESPlorer是执行lua代码的工具上传速度较快，可以直接控制GPIO等操作。</p><h2 id="三、ESP8266-LUAloader"><a href="#三、ESP8266-LUAloader" class="headerlink" title="三、ESP8266 LUAloader"></a>三、ESP8266 LUAloader</h2><p>ESP8266 LUAloader 是可视化的lua工具，能够通过软件界面直接设置gpio的高低电平，还可以设置wifi连接，同时可以上传lua代码。</p><p><strong>ps：</strong> 手中的esp8266板子控制灯的gpio是gpio2而不是电路图中的gpio0。设置gpio代号为4而不是0.</p><h2 id="四、固件区分"><a href="#四、固件区分" class="headerlink" title="四、固件区分"></a>四、固件区分</h2><p>H:\脑洞产品\5.ESP8266学习\6.学习资料整理\1.文档\3.固件\固件\ESP8266原安信可固件\v1.3.0.2 AT Firmware.bin是安信可的AT固件可以执行AT指令，通信波特率为115200。可以使用ESPlorer和ESP8266调试工具V2.2对应下面的固件好使的.exe通过AT指令控制。</p><p>H:\脑洞产品\5.ESP8266学习\6.学习资料整理\1.文档\3.固件\固件\Nodemcu官方固件\nodemcu_float_0.9.6-dev_20150704.bin和nodemcu_integer_0.9.6-dev_20150704.bin固件可以使用lua脚本，通信波特率9600不能使用AT指令。</p>]]></content>
      
      
      <categories>
          
          <category> ESP8266 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP8266 </tag>
            
            <tag> 硬件编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode 安装 ESP8266 开发环境</title>
      <link href="/2022/08/2534083.html"/>
      <url>/2022/08/2534083.html</url>
      
        <content type="html"><![CDATA[<h1 id="vscode开发esp8266环境配置"><a href="#vscode开发esp8266环境配置" class="headerlink" title="vscode开发esp8266环境配置"></a>vscode开发esp8266环境配置</h1><h2 id="一、安装VSCODE"><a href="#一、安装VSCODE" class="headerlink" title="一、安装VSCODE"></a>一、安装VSCODE</h2><h2 id="二、安装VScode-arduino插件"><a href="#二、安装VScode-arduino插件" class="headerlink" title="二、安装VScode-arduino插件"></a>二、安装VScode-arduino插件</h2><!--![安装arduino插件](%E5%AE%89%E8%A3%85arduino%E6%8F%92%E4%BB%B6.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073c441f4b0.jpeg" alt="安装arduino插件"></p><h2 id="三、配置arduino环境"><a href="#三、配置arduino环境" class="headerlink" title="三、配置arduino环境"></a>三、配置arduino环境</h2><p>在设置中搜索arduino，将Arduino：Path的值改成自己的arduino安装目录。</p><!--![arduino插件设置](arduino%E6%8F%92%E4%BB%B6%E8%AE%BE%E7%BD%AE.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073c8f5ec79.jpeg" alt="arduino插件设置"></p><h2 id="四、创建工程"><a href="#四、创建工程" class="headerlink" title="四、创建工程"></a>四、创建工程</h2><h3 id="1-创建一个文件夹"><a href="#1-创建一个文件夹" class="headerlink" title="1.创建一个文件夹"></a>1.创建一个文件夹</h3><h3 id="2-创建-ino文件"><a href="#2-创建-ino文件" class="headerlink" title="2.创建.ino文件"></a>2.创建.ino文件</h3><h3 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3.修改配置"></a>3.修改配置</h3><p>在自己的目录下创建.ino文件或打开例程一般会自动创建.vscode文件夹，里面包括三个文件，分别是arduino.json、c_cpp_properties.json、setting.json。其中c_cpp_properties.json主要用来配置程序的引用，.ino文件中的include的头文件必须在c_cpp_properties.json中的includepath属性中配置</p><!--![c_cpp_properties文件配置](c_cpp_properties%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073ce623cc4.jpeg" alt="c_cpp_properties文件配置"></p><p><strong>注：</strong>引用头文件后还可能报错，可以在setting中进行如下设置</p><!--![报错](%E6%8A%A5%E9%94%99.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073d136b3a4.jpeg" alt="报错"></p><!--![setting设置](setting%E8%AE%BE%E7%BD%AE.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073df002394.jpeg" alt="setting设置"></p><h3 id="4-编译上传"><a href="#4-编译上传" class="headerlink" title="4.编译上传"></a>4.编译上传</h3><p>在窗口右下角 点击<Select Board Type>选择板子类型和<Select Serial Port>选择串口</p><!--![选择板子和串口](%E9%80%89%E6%8B%A9%E6%9D%BF%E5%AD%90%E5%92%8C%E4%B8%B2%E5%8F%A3.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073e122433d.jpeg" alt="选择板子和串口"></p><p><strong>注：</strong> arduino插件0.4.6版本有bug进入<Select Board Type>后无法选择板子，改下载0.4.5版本重启后正常。</p><!--![选择板子](%E9%80%89%E6%8B%A9%E6%9D%BF%E5%AD%90.jpg)--><p><img src="http://ezblog.gnway.cc/i/2022/08/25/63073e2dd7c6e.jpeg" alt="选择板子"><br>根据自己的板子类型选择即可。</p><p>点击上传。</p><p><img src="/%E4%B8%8A%E4%BC%A0.jpg" alt="上传"></p><p><strong>注：</strong> 默认情况上传代吗的输出会显示乱码。</p><p><img src="/%E4%B9%B1%E7%A0%81.jpg" alt="乱码"></p><p>将文件C:\Users\ZXD.vscode\extensions\vsciot-vscode.vscode-arduino-0.4.5\out\src\common\util.js中的codepage行注释掉即可。</p><p><img src="/util%E6%B3%A8%E9%87%8A.jpg" alt="util注释"></p><p>重启vscode后输出正常。</p><p><img src="/%E6%AD%A3%E5%B8%B8%E8%BE%93%E5%87%BA.jpg" alt="正常输出"></p><p><strong>至此就可以正常使用vscode进行esp8266进行开发工作</strong></p><p>**PS:**关闭360能够显著提高编译速度</p>]]></content>
      
      
      <categories>
          
          <category> ESP8266 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP8266 </tag>
            
            <tag> 硬件编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino开发ESP8266环境配置</title>
      <link href="/2022/08/2327333.html"/>
      <url>/2022/08/2327333.html</url>
      
        <content type="html"><![CDATA[<h1 id="Arduino开发ESP8266环境配置"><a href="#Arduino开发ESP8266环境配置" class="headerlink" title="Arduino开发ESP8266环境配置"></a>Arduino开发ESP8266环境配置</h1><h2 id="一、添加-ESP8266-支持"><a href="#一、添加-ESP8266-支持" class="headerlink" title="一、添加 ESP8266 支持"></a>一、添加 ESP8266 支持</h2><p>首先从 <a href="https://www.arduino.cc/en/main/software">Arduino 官网</a> 下载最新版本的 <strong>Arduino IDE</strong> 软件并安装。<br> 安装完成以后，进入<strong>首选项</strong>（Preferences），找到<strong>附加开发板管理器地址</strong>（Additional Board Manager URLs），并在其后添加如下信息：<br> <code>http://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p><p><img src="http://ezblog.gnway.cc/i/2022/08/23/6304a2ed3cb98.png"></p><p>之后点击<strong>工具</strong> - <strong>开发板</strong> - <strong>开发板管理器</strong>，进入开发板管理器界面：</p><p><img src="http://ezblog.gnway.cc/i/2022/08/23/6304a336832f3.png"></p><h2 id="二、找到-esp8266-并安装："><a href="#二、找到-esp8266-并安装：" class="headerlink" title="二、找到 esp8266 并安装："></a>二、找到 <em>esp8266</em> 并安装：</h2><p><img src="http://ezblog.gnway.cc/i/2022/08/23/6304a37033daf.png"></p><p>这里安装ESP8266需通过GitHub网络问题可能安装不成功。</p><p>安装完成后，重启 Arduino IDE 软件。在<strong>工具</strong> - <strong>开发板</strong>选项中即会看到 ESP8266 开发板的选项：</p><p><img src="http://ezblog.gnway.cc/i/2022/08/23/6304a3a5ca113.png"></p><h2 id="三、代码开发"><a href="#三、代码开发" class="headerlink" title="三、代码开发"></a>三、代码开发</h2><p><strong>注意事项</strong></p><p>例程程代码和实际开发板对应的引脚不一样，需找打对应的规则。如图：例程中D1对应8266开发板的GPIO 5对应数字是5</p><p><img src="http://ezblog.gnway.cc/i/2022/08/23/6304a3d194fd6.png"></p><h2 id="四、编译上传"><a href="#四、编译上传" class="headerlink" title="四、编译上传"></a>四、编译上传</h2><p><img src="http://ezblog.gnway.cc/i/2022/08/23/6304a40339b9b.jpeg"></p><p>1是编译、2是上传</p><p><strong>上传是需先将开发板重启然后按住FLASH等待出现connect字样后松开FLASH按键</strong></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP8266 </tag>
            
            <tag> 硬件编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ipad编程软件code的使用方法——特别是git同步问题</title>
      <link href="/2022/08/0434694.html"/>
      <url>/2022/08/0434694.html</url>
      
        <content type="html"><![CDATA[<!-- ---title: 基于Hexo的hexo-theme-matery主题搭建博客并优化date: 2019-10-03 14:25:00author: 悟尘img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: 工具tags:  - blog  - hexo---标题行示例--><h1 id="iPad-code-app-使用"><a href="#iPad-code-app-使用" class="headerlink" title="iPad code app 使用"></a>iPad code app 使用</h1><h2 id="在-ipad-上进行编程可以使用-code-APP"><a href="#在-ipad-上进行编程可以使用-code-APP" class="headerlink" title="在 ipad 上进行编程可以使用 code APP"></a>在 ipad 上进行编程可以使用 code APP</h2><p><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcb08bad3c8.png" alt="IMG_0216.png"><br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcb3006912b.png" alt="IMG_0217.png"><br>    该软件支持 python、javascprits、html、c 等编程语言。</p><h2 id="code-使用过程的一些问题"><a href="#code-使用过程的一些问题" class="headerlink" title="code 使用过程的一些问题"></a>code 使用过程的一些问题</h2><h3 id="1-新建文件是不可以在命名前文件类型，因为先点选文件类型的话会自动创建-1-个-default-名字的文件。"><a href="#1-新建文件是不可以在命名前文件类型，因为先点选文件类型的话会自动创建-1-个-default-名字的文件。" class="headerlink" title="1.新建文件是不可以在命名前文件类型，因为先点选文件类型的话会自动创建 1 个 default 名字的文件。"></a>1.新建文件是不可以在命名前文件类型，因为先点选文件类型的话会自动创建 1 个 default 名字的文件。</h3><p><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcb31c9520e.png" alt="IMG_0218.png"></p><h3 id="2-不能使用蓝牙鼠标进行多选，有时可以。"><a href="#2-不能使用蓝牙鼠标进行多选，有时可以。" class="headerlink" title="2.不能使用蓝牙鼠标进行多选，有时可以。"></a>2.不能使用蓝牙鼠标进行多选，有时可以。</h3><h3 id="3-从-GitHub-克隆文件仓库"><a href="#3-从-GitHub-克隆文件仓库" class="headerlink" title="3.从 GitHub 克隆文件仓库"></a>3.从 GitHub 克隆文件仓库</h3><pre><code>为了能够与 GitHub 进行同步，首先要在 GitHub 建立文件仓库 ，然后将文件仓库克隆到本地。</code></pre><p><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcb37872c77.png" alt="IMG_0233.png"><br>    将文件库克隆到本地后，为了能够成功的 commit 、push、fetch，所以要在设置中的版本控制中添加作者身份和凭据。<br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcb39c3378d.png" alt="IMG_0232.png"><br>    作者身份根据需要自己添加，凭据中添加 GitHub 账号和 GitHub 个人访问令牌。<br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcb3bc366b3.png" alt="IMG_0231.png"></p><h3 id="4-code-提交-commit-的问题"><a href="#4-code-提交-commit-的问题" class="headerlink" title="4.code 提交 commit 的问题"></a>4.code 提交 commit 的问题</h3><p><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcb3dc97699.png" alt="IMG_0234.png"><br>    code app 可以通过远吗管理功能将代码上传到 GitHub 进行版本控制。<br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcba697489f.png" alt="IMG_0221.png"><br>    文件发生修改后，在源码管理页面的变更栏中会显示发生变化的文件，此时点击”+”，提交变更，<br>    会提示变更已经缓存。这时变更仅在本地缓存，随时可以撤销，要在上边的文本框中输入本次的更改注释，用来解释本次修改了哪些地方。<br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcba697489f.png" alt="IMG_0221.png"></p><blockquote><p>注意 code app 更改注释不可以为空，否层将不能提交缓存。右下角会提示 commit can not be empty.<br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcbe7d8e683.png" alt="IMG_0222.png"><br>    输入 commit 的注释后点击文本框下边的对号会提示 commit succeed，表示 commit 成功。</p></blockquote><h3 id="5-code-的-push-问题"><a href="#5-code-的-push-问题" class="headerlink" title="5.code 的 push 问题"></a>5.code 的 push 问题</h3><pre><code>提交缓存之后点击文本文本框下边的三个点可以看到 push 和 fetch 按钮。</code></pre><p><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcbe9dbeea8.png" alt="IMG_0224.png"></p><blockquote><p>注意如果设置中的凭据设置错误将会提示 too many redirects or authentication replays。<br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcbecebd738.png" alt="IMG_0229.png"></p></blockquote><h3 id="6-code-app-的fetch-问题"><a href="#6-code-app-的fetch-问题" class="headerlink" title="6.code app 的fetch 问题"></a>6.code app 的fetch 问题</h3><p>为了同步本地和 GitHub 仓库的文件，在更改本地文件前首先使用 fetch 将 GitHub远端的文件拉到本地。成功后提示 fetch succeed。<br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcbe9dbeea8.png" alt="IMG_0224.png"><br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcbf14966fb.png" alt="IMG_0226.png"><br>    当成功将文件复制到本地后，长按界面左下角的 master，会弹出 checkout detached 界面。<br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcb3dc97699.png" alt="IMG_0234.png"><br>    成功后再次点击 checkout detached 页面的 origin&#x2F;master 分支就可以了。<br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcbf7b8cd44.png" alt="IMG_0228.png"></p>]]></content>
      
      
      <categories>
          
          <category> ipad编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 编程 </tag>
            
            <tag> ipad </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用github搭建免费的个人博客网站</title>
      <link href="/2022/08/019163.html"/>
      <url>/2022/08/019163.html</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-搭建个人免费博客网站"><a href="#GitHub-搭建个人免费博客网站" class="headerlink" title="GitHub 搭建个人免费博客网站"></a>GitHub 搭建个人免费博客网站</h1><h2 id="第一-步-创建-New-repository"><a href="#第一-步-创建-New-repository" class="headerlink" title="第一 步 创建 New repository"></a>第一 步 创建 New repository</h2><p><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcf0769b779.jpeg"></p><h2 id="第二步-在-Repository-name-中输入网站的名字要使用-Owner-的小写。"><a href="#第二步-在-Repository-name-中输入网站的名字要使用-Owner-的小写。" class="headerlink" title="第二步 在 Repository name 中输入网站的名字要使用 Owner 的小写。"></a>第二步 在 Repository name 中输入网站的名字要使用 Owner 的小写。</h2><p><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcf0be27891.png"><br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcf1165ee16.png"><br>能看出来 Owner 的小写是一个特殊的仓库。成功后通过 <a href="https://zhangxd123456.github.io/">https://zhangxd123456.github.io</a> 可以访问自己的博客。目前还不可以，通过该地址访问提示 404 。</p><hr><blockquote><p>ps:这里注意，命名的时候应当是 zhangxd123456.github.io 而不是 zhangxd123456，如果命名错了可以从下图的位置修改，setting-&gt;General-&gt;Repository name<br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcf15e7e455.png"><br><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcf2c2a9705.png"></p></blockquote><hr><blockquote><p>ps：如果命名时没有按照规则比如命名为 zblog，输入网址 <a href="https://zblog.github.io/">https://zblog.github.io</a> 网址会跳转黄色网站。</p></blockquote><h2 id="第三步-初始化网站，在仓库-setting-属性中选择-pages-标签页初始化网站。初始化完成后地址变成了-https-zhangxd123456-github-io-zhangxd123456-，很奇怪。"><a href="#第三步-初始化网站，在仓库-setting-属性中选择-pages-标签页初始化网站。初始化完成后地址变成了-https-zhangxd123456-github-io-zhangxd123456-，很奇怪。" class="headerlink" title="第三步 初始化网站，在仓库 setting 属性中选择 pages 标签页初始化网站。初始化完成后地址变成了 https://zhangxd123456.github.io/zhangxd123456/，很奇怪。"></a>第三步 初始化网站，在仓库 setting 属性中选择 pages 标签页初始化网站。初始化完成后地址变成了 <a href="https://zhangxd123456.github.io/zhangxd123456/%EF%BC%8C%E5%BE%88%E5%A5%87%E6%80%AA%E3%80%82">https://zhangxd123456.github.io/zhangxd123456/，很奇怪。</a></h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://ezblog.gnway.cc/i/2022/08/17/62fcf30809659.png"></h2><blockquote><p>注意：在命名 repository 名字的时候注意时 owner 小写+github.io。如果仅用 owner 小写则登陆地址将变为 <a href="https://owner/">https://owner</a> 小写.github.io&#x2F;owner 小写&#x2F;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ipad编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 编程 </tag>
            
            <tag> ipad </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
